// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/saltbo/zpan/internal/app/entity"
)

func newMatter(db *gorm.DB, opts ...gen.DOOption) matter {
	_matter := matter{}

	_matter.matterDo.UseDB(db, opts...)
	_matter.matterDo.UseModel(&entity.Matter{})

	tableName := _matter.matterDo.TableName()
	_matter.ALL = field.NewAsterisk(tableName)
	_matter.Id = field.NewInt64(tableName, "id")
	_matter.Uid = field.NewInt64(tableName, "uid")
	_matter.Sid = field.NewInt64(tableName, "sid")
	_matter.Alias_ = field.NewString(tableName, "alias")
	_matter.Name = field.NewString(tableName, "name")
	_matter.Type = field.NewString(tableName, "type")
	_matter.Size = field.NewInt64(tableName, "size")
	_matter.DirType = field.NewInt8(tableName, "dirtype")
	_matter.Parent = field.NewString(tableName, "parent")
	_matter.Object = field.NewString(tableName, "object")
	_matter.CreatedAt = field.NewTime(tableName, "created_at")
	_matter.UpdatedAt = field.NewTime(tableName, "updated_at")
	_matter.UploadedAt = field.NewTime(tableName, "uploaded_at")
	_matter.DeletedAt = field.NewField(tableName, "deleted_at")
	_matter.TrashedBy = field.NewString(tableName, "trashed_by")

	_matter.fillFieldMap()

	return _matter
}

type matter struct {
	matterDo

	ALL        field.Asterisk
	Id         field.Int64
	Uid        field.Int64
	Sid        field.Int64
	Alias_     field.String
	Name       field.String
	Type       field.String
	Size       field.Int64
	DirType    field.Int8
	Parent     field.String
	Object     field.String
	CreatedAt  field.Time
	UpdatedAt  field.Time
	UploadedAt field.Time
	DeletedAt  field.Field
	TrashedBy  field.String

	fieldMap map[string]field.Expr
}

func (m matter) Table(newTableName string) *matter {
	m.matterDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m matter) As(alias string) *matter {
	m.matterDo.DO = *(m.matterDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *matter) updateTableName(table string) *matter {
	m.ALL = field.NewAsterisk(table)
	m.Id = field.NewInt64(table, "id")
	m.Uid = field.NewInt64(table, "uid")
	m.Sid = field.NewInt64(table, "sid")
	m.Alias_ = field.NewString(table, "alias")
	m.Name = field.NewString(table, "name")
	m.Type = field.NewString(table, "type")
	m.Size = field.NewInt64(table, "size")
	m.DirType = field.NewInt8(table, "dirtype")
	m.Parent = field.NewString(table, "parent")
	m.Object = field.NewString(table, "object")
	m.CreatedAt = field.NewTime(table, "created_at")
	m.UpdatedAt = field.NewTime(table, "updated_at")
	m.UploadedAt = field.NewTime(table, "uploaded_at")
	m.DeletedAt = field.NewField(table, "deleted_at")
	m.TrashedBy = field.NewString(table, "trashed_by")

	m.fillFieldMap()

	return m
}

func (m *matter) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *matter) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 15)
	m.fieldMap["id"] = m.Id
	m.fieldMap["uid"] = m.Uid
	m.fieldMap["sid"] = m.Sid
	m.fieldMap["alias"] = m.Alias_
	m.fieldMap["name"] = m.Name
	m.fieldMap["type"] = m.Type
	m.fieldMap["size"] = m.Size
	m.fieldMap["dirtype"] = m.DirType
	m.fieldMap["parent"] = m.Parent
	m.fieldMap["object"] = m.Object
	m.fieldMap["created_at"] = m.CreatedAt
	m.fieldMap["updated_at"] = m.UpdatedAt
	m.fieldMap["uploaded_at"] = m.UploadedAt
	m.fieldMap["deleted_at"] = m.DeletedAt
	m.fieldMap["trashed_by"] = m.TrashedBy
}

func (m matter) clone(db *gorm.DB) matter {
	m.matterDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m matter) replaceDB(db *gorm.DB) matter {
	m.matterDo.ReplaceDB(db)
	return m
}

type matterDo struct{ gen.DO }

type IMatterDo interface {
	gen.SubQuery
	Debug() IMatterDo
	WithContext(ctx context.Context) IMatterDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMatterDo
	WriteDB() IMatterDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMatterDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMatterDo
	Not(conds ...gen.Condition) IMatterDo
	Or(conds ...gen.Condition) IMatterDo
	Select(conds ...field.Expr) IMatterDo
	Where(conds ...gen.Condition) IMatterDo
	Order(conds ...field.Expr) IMatterDo
	Distinct(cols ...field.Expr) IMatterDo
	Omit(cols ...field.Expr) IMatterDo
	Join(table schema.Tabler, on ...field.Expr) IMatterDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMatterDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMatterDo
	Group(cols ...field.Expr) IMatterDo
	Having(conds ...gen.Condition) IMatterDo
	Limit(limit int) IMatterDo
	Offset(offset int) IMatterDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMatterDo
	Unscoped() IMatterDo
	Create(values ...*entity.Matter) error
	CreateInBatches(values []*entity.Matter, batchSize int) error
	Save(values ...*entity.Matter) error
	First() (*entity.Matter, error)
	Take() (*entity.Matter, error)
	Last() (*entity.Matter, error)
	Find() ([]*entity.Matter, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.Matter, err error)
	FindInBatches(result *[]*entity.Matter, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*entity.Matter) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMatterDo
	Assign(attrs ...field.AssignExpr) IMatterDo
	Joins(fields ...field.RelationField) IMatterDo
	Preload(fields ...field.RelationField) IMatterDo
	FirstOrInit() (*entity.Matter, error)
	FirstOrCreate() (*entity.Matter, error)
	FindByPage(offset int, limit int) (result []*entity.Matter, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMatterDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m matterDo) Debug() IMatterDo {
	return m.withDO(m.DO.Debug())
}

func (m matterDo) WithContext(ctx context.Context) IMatterDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m matterDo) ReadDB() IMatterDo {
	return m.Clauses(dbresolver.Read)
}

func (m matterDo) WriteDB() IMatterDo {
	return m.Clauses(dbresolver.Write)
}

func (m matterDo) Session(config *gorm.Session) IMatterDo {
	return m.withDO(m.DO.Session(config))
}

func (m matterDo) Clauses(conds ...clause.Expression) IMatterDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m matterDo) Returning(value interface{}, columns ...string) IMatterDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m matterDo) Not(conds ...gen.Condition) IMatterDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m matterDo) Or(conds ...gen.Condition) IMatterDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m matterDo) Select(conds ...field.Expr) IMatterDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m matterDo) Where(conds ...gen.Condition) IMatterDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m matterDo) Order(conds ...field.Expr) IMatterDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m matterDo) Distinct(cols ...field.Expr) IMatterDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m matterDo) Omit(cols ...field.Expr) IMatterDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m matterDo) Join(table schema.Tabler, on ...field.Expr) IMatterDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m matterDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMatterDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m matterDo) RightJoin(table schema.Tabler, on ...field.Expr) IMatterDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m matterDo) Group(cols ...field.Expr) IMatterDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m matterDo) Having(conds ...gen.Condition) IMatterDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m matterDo) Limit(limit int) IMatterDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m matterDo) Offset(offset int) IMatterDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m matterDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMatterDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m matterDo) Unscoped() IMatterDo {
	return m.withDO(m.DO.Unscoped())
}

func (m matterDo) Create(values ...*entity.Matter) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m matterDo) CreateInBatches(values []*entity.Matter, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m matterDo) Save(values ...*entity.Matter) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m matterDo) First() (*entity.Matter, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Matter), nil
	}
}

func (m matterDo) Take() (*entity.Matter, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Matter), nil
	}
}

func (m matterDo) Last() (*entity.Matter, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Matter), nil
	}
}

func (m matterDo) Find() ([]*entity.Matter, error) {
	result, err := m.DO.Find()
	return result.([]*entity.Matter), err
}

func (m matterDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.Matter, err error) {
	buf := make([]*entity.Matter, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m matterDo) FindInBatches(result *[]*entity.Matter, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m matterDo) Attrs(attrs ...field.AssignExpr) IMatterDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m matterDo) Assign(attrs ...field.AssignExpr) IMatterDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m matterDo) Joins(fields ...field.RelationField) IMatterDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m matterDo) Preload(fields ...field.RelationField) IMatterDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m matterDo) FirstOrInit() (*entity.Matter, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Matter), nil
	}
}

func (m matterDo) FirstOrCreate() (*entity.Matter, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Matter), nil
	}
}

func (m matterDo) FindByPage(offset int, limit int) (result []*entity.Matter, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m matterDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m matterDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m matterDo) Delete(models ...*entity.Matter) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *matterDo) withDO(do gen.Dao) *matterDo {
	m.DO = *do.(*gen.DO)
	return m
}
