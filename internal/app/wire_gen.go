// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package app

import (
	"fmt"
	"github.com/gin-gonic/gin"
	"github.com/saltbo/gopkg/ginutil"
	"github.com/saltbo/zpan/internal/app/api"
	"github.com/saltbo/zpan/internal/app/dao"
	"github.com/saltbo/zpan/internal/app/repo"
	"github.com/saltbo/zpan/internal/app/usecase"
	"github.com/saltbo/zpan/internal/app/usecase/storage"
	"github.com/saltbo/zpan/internal/app/usecase/uploader"
	"github.com/saltbo/zpan/internal/app/usecase/vfs"
	"github.com/saltbo/zpan/web"
	"github.com/spf13/viper"
)

// Injectors from server.go:

func NewServer() *Server {
	query := dao.GetDBQuery()
	storageDBQuery := repo.NewStorageDBQuery(query)
	matterDBQuery := repo.NewMatterDBQuery(query)
	recycleBinDBQuery := repo.NewRecycleBinDBQuery(query)
	repository := repo.NewRepository(storageDBQuery, matterDBQuery, recycleBinDBQuery)
	cloudStorage := storage.NewCloudStorage(storageDBQuery)
	cloudUploader := uploader.NewCloudUploader(cloudStorage, matterDBQuery)
	vfsVfs := vfs.NewVfs(matterDBQuery, recycleBinDBQuery, cloudUploader)
	usecaseRepository := usecase.NewRepository(cloudStorage, cloudUploader, vfsVfs)
	fileResource := api.NewFileResource(vfsVfs, cloudUploader)
	recycleBin := vfs.NewRecycleBin(recycleBinDBQuery, matterDBQuery, cloudStorage)
	recycleBinResource := api.NewRecycleBinResource(recycleBinDBQuery, recycleBin)
	shareResource := api.NewShareResource(matterDBQuery)
	storageResource := api.NewStorageResource(storageDBQuery, cloudStorage)
	option := api.NewOptionResource()
	tokenResource := api.NewTokenResource()
	userResource := api.NewUserResource()
	userKeyResource := api.NewUserKeyResource()
	apiRepository := api.NewRepository(fileResource, recycleBinResource, shareResource, storageResource, option, tokenResource, userResource, userKeyResource)
	server := newServer(repository, usecaseRepository, apiRepository)
	return server
}

// server.go:

type Server struct {
	uc *usecase.Repository
	rp *repo.Repository
	ap *api.Repository
}

func newServer(rp *repo.Repository, uc *usecase.Repository, ap *api.Repository) *Server {
	return &Server{rp: rp, uc: uc, ap: ap}
}

func (s *Server) Run() error {

	ge := gin.Default()
	api.SetupRoutes(ge, s.ap)
	web.SetupRoutes(ge)
	ginutil.Startup(ge, fmt.Sprintf(":%d", viper.GetInt("port")))
	return nil
}
